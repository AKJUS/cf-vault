#!/usr/bin/env bash

version=$1

if [[ -z "$version" ]]; then
  echo "usage: $0 <version-number>"
  exit 1
fi

git_sha=`git rev-parse --short HEAD`
version_with_sha="${version}+${git_sha}"

if [ -d build ]; then
  rm -rf build
fi
mkdir -p build

platforms=("windows/amd64" "linux/amd64" "darwin/amd64")

echo "==> Build started for v${version}"

for platform in "${platforms[@]}"
do
  platform_split=(${platform//\// })
  GOOS=${platform_split[0]}
  GOARCH=${platform_split[1]}

  mkdir -p "build/${GOOS}"

  output_name="cf-vault_${version}_${GOOS}_${GOARCH}"

  printf "==> Building %s\t%s\n" "$platform" "build/$output_name" | expand -t 30

  # trim GOPATH from the stacktraces
  GCFLAGS="-gcflags=all=-trimpath=$GOPATH -asmflags=all=-trimpath=$GOPATH"

  if [ $GOOS = "windows" ]; then
    env GOOS=$GOOS GOARCH=$GOARCH go build $GCFLAGS -o "build/${GOOS}/cf-vault.exe" -ldflags "-X github.com/jacobbednarz/cf-vault/cmd.Rev=${version_with_sha}" .
  else
    env GOOS=$GOOS GOARCH=$GOARCH go build $GCFLAGS -o "build/${GOOS}/cf-vault" -ldflags "-X github.com/jacobbednarz/cf-vault/cmd.Rev=${version_with_sha}" .
  fi
  if [ $? -ne 0 ]; then
    echo "Building the binary has failed!"
    exit 1
  fi

  touch build/checksums.txt

  printf "==> Tarballing %s\t%s\n" "$platform" "build/${output_name}.tar.gz" | expand -t 30
  if [ $GOOS = "windows" ]; then
    tar -czf "build/${output_name}.tar.gz" -C "build/$GOOS" "cf-vault.exe"
  else
    tar -czf "build/${output_name}.tar.gz" -C "build/$GOOS" "cf-vault"
  fi

  if [ $? -ne 0 ]; then
    echo "Creating the tarball has failed!"
    exit 1
  fi

  echo "==> Adding file checksums to build/checksums.txt"
  shasum -a 256 build/$GOOS/* >> "build/checksums.txt"
done

shasum -a 256 build/*.tar.gz >> "build/checksums.txt"

echo "==> Build process complete"
